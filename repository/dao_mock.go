// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/wigwamwam/CRUD_app/models"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// DeleteBankByID mocks base method.
func (m *MockDAO) DeleteBankByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBankByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBankByID indicates an expected call of DeleteBankByID.
func (mr *MockDAOMockRecorder) DeleteBankByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankByID", reflect.TypeOf((*MockDAO)(nil).DeleteBankByID), id)
}

// InsertBank mocks base method.
func (m *MockDAO) InsertBank(bank models.Bank) (models.Bank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBank", bank)
	ret0, _ := ret[0].(models.Bank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBank indicates an expected call of InsertBank.
func (mr *MockDAOMockRecorder) InsertBank(bank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBank", reflect.TypeOf((*MockDAO)(nil).InsertBank), bank)
}

// SelectAllBanks mocks base method.
func (m *MockDAO) SelectAllBanks() ([]models.Bank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllBanks")
	ret0, _ := ret[0].([]models.Bank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllBanks indicates an expected call of SelectAllBanks.
func (mr *MockDAOMockRecorder) SelectAllBanks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllBanks", reflect.TypeOf((*MockDAO)(nil).SelectAllBanks))
}

// SelectBankByID mocks base method.
func (m *MockDAO) SelectBankByID(id int) (models.Bank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBankByID", id)
	ret0, _ := ret[0].(models.Bank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectBankByID indicates an expected call of SelectBankByID.
func (mr *MockDAOMockRecorder) SelectBankByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBankByID", reflect.TypeOf((*MockDAO)(nil).SelectBankByID), id)
}

// UpdateBank mocks base method.
func (m *MockDAO) UpdateBank(id int, bank models.Bank) (models.Bank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBank", id, bank)
	ret0, _ := ret[0].(models.Bank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBank indicates an expected call of UpdateBank.
func (mr *MockDAOMockRecorder) UpdateBank(id, bank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBank", reflect.TypeOf((*MockDAO)(nil).UpdateBank), id, bank)
}
